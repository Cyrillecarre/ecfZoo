security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider_chain:
            chain:
                providers: ['app_user_provider_veterinary', 'app_user_provider_admin', 'app_user_provider_employe']

        app_user_provider_veterinary:
            entity:
                class: App\Entity\Veterinary
                property: email

        app_user_provider_admin:
            entity:
                class: App\Entity\Admin
                property: email
        
        app_user_provider_employe:
            entity:
                class: App\Entity\Employe
                property: email

        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            custom_authenticator: App\Security\SecurityAuthenticator
            provider: app_user_provider_chain
            logout:
                path: app_logout
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/veterinary, roles: ROLE_VETERINARY }
        - { path: ^/employe, roles: ROLE_EMPLOYE }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
